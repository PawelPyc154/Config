type TestArg =
  | "test1.test1"
  | "test1.test2"
  | "test1.test3.test"
  | "test1.test4.test";

type TestArg2 =
  | "test2.test3"
  | "test2.test7"
  | "test2.test6.test"
  | "test2.test7.test";

type Modules = {
  common: TestArg;
  common2: TestArg2;
};

const test = (e: TestArg2) => {
  console.log(e);
};

type TranslateSuffix<TPrefix extends string, TModules extends keyof Modules> =
  Modules[TModules] extends `${TPrefix}${infer Y}` ? Y : never;

const test2 = (suffix: TranslateSuffix<"test2.", "common2">) =>
  test(`test2.${suffix}` as const);
test2("test3");
